name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - dev

jobs:
  build_docker_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.2
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login ghcr.io -u ${{ secrets.USER_NAME }} --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Add environment variables to .env
      - name: Add environment variables to .env
        run: |
          # For Production (master branch)
          if [ "${GITHUB_REF}" == "refs/heads/master" ]; then
            echo "Setting production variables"
            echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
            echo PORT=${{ secrets.PORT }} >> .env
            echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
            echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
            echo S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} >> .env
            echo TABLE_TEACHERS_PORTAL=${{ secrets.TABLE_TEACHERS_PORTAL }} >> .env
            echo COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }} >> .env
            echo COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }} >> .env
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          fi

          # For Development (dev branch)
          if [ "${GITHUB_REF}" == "refs/heads/dev" ]; then
          fi

          # Common environment variables for both
          

      # Validate .env file contents
      - name: Print .env file contents for debugging
        run: cat .env

      # Build Docker image for production
      - name: Build Production Docker image
        if: github.ref == 'refs/heads/master'
        run: docker build --build-arg env_name=production --build-arg env_port=3001 -t ghcr.io/Branak/esturio/backend:production .

      # Build Docker image for development
      - name: Build Development Docker image
        if: github.ref == 'refs/heads/dev'
        run: docker build --build-arg env_name=dev --build-arg env_port=3002 -t ghcr.io/Branak/esturio/backend:dev .

      # Push Production Docker image to registry
      - name: Push Production Docker image to registry
        if: github.ref == 'refs/heads/master'
        run: docker push ghcr.io/Branak/esturio/backend:production

      # Push Development Docker image to registry
      - name: Push Development Docker image to registry
        if: github.ref == 'refs/heads/dev'
        run: docker push ghcr.io/Branak/esturio/backend:dev

  # Job to deploy the application to production
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build_docker_image
    if: github.ref == 'refs/heads/master'  # Only for the master branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH and SSHPass
        run: sudo apt-get update && sudo apt-get install -y openssh-client sshpass

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up deployment directory
        run: |
          mkdir esturio-backend
          chmod +x esturio-backend
          mv docker-compose-production.yml esturio-backend/docker-compose.yml

      - name: Decode SSH Key and set permissions
        run: echo "${{ secrets.SERVER_SSH_KEY }}" | base64 -d > my_ssh && chmod 400 my_ssh

      - name: Copy files to server
        run: |
          sshpass scp -i my_ssh -o StrictHostKeyChecking=no -r esturio-backend ubuntu@${{ secrets.SERVER_IP }}:/home/ubuntu/

      - name: SSH and deploy
        run: |
          sshpass ssh -i my_ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} \
          "cd /home/ubuntu/esturio-backend; \
           sudo docker login -u "${{ secrets.USER_NAME }}" -p ${{ secrets.DOCKER_PASSWORD }} ghcr.io/Branak/esturio/backend:production; \
           sudo docker-compose down; \
           sudo docker image rm ghcr.io/Branak/esturio/backend:production; \
           sudo docker-compose up -d;"

  # Job to deploy the application to development (testing)
  deploy_dev:
    name: Deploy to Development (Testing)
    runs-on: ubuntu-latest
    needs: build_docker_image
    if: github.ref == 'refs/heads/dev'  # Only for the dev branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH and SSHPass
        run: sudo apt-get update && sudo apt-get install -y openssh-client sshpass

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up deployment directory
        run: |
          mkdir esturio-backend-dev
          chmod +x esturio-backend-dev
          mv docker-compose-dev.yml esturio-backend-dev/docker-compose.yml

      - name: Decode SSH Key and set permissions
        run: echo "${{ secrets.SERVER_SSH_KEY }}" | base64 -d > my_ssh && chmod 400 my_ssh

      - name: Copy files to server
        run: |
          sshpass scp -i my_ssh -o StrictHostKeyChecking=no -r oncater-backend-dev ubuntu@${{ secrets.SERVER_IP }}:/home/ubuntu/

      - name: SSH and deploy
        run: |
          sshpass ssh -i my_ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} \
          "cd /home/ubuntu/esturio-backend-dev; \
           sudo docker login -u "${{ secrets.USER_NAME }}" -p ${{ secrets.DOCKER_PASSWORD }} ghcr.io/Branak/esturio/backend:dev; \
           sudo docker-compose down; \
           sudo docker image rm ghcr.io/Branak/esturio/backend:dev; \
           sudo docker-compose up -d;"
